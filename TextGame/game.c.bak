#include <stdio.h>
#include <unistd.h>
#include <string.h>

int current_x;	// Global variable for saving the cursor x position
int current_y;	// Global variable for saving the cursor y position

enum color_t { GRAY = 30, RED = 31, GREEN = 32, YELLOW = 33, BLUE=34, PURPLE=35, CYAN=36, WHITE=37} ;

/* Set the color of the font */
void fgcolor(enum color_t c, int boldness)
{
	printf("\033[%i;%im",boldness, c);
}

/* Prints out the message character by character instead of all at once */
/* Returns the number of lines */
int printmsg(char *msg)
{
	int size = strlen(msg);
	int i, lines = 0;
	
	for(i=0; i <= size; i++) {
		// every 60 characters print a newline
		if(i != 0 && i % 60 == 0) { // Max characters in a line
			printf("\n");
			if(msg[i] == ' ')	// Skip space characters so the newline doesn't start with one
				i++;
			movecursor(current_x, current_y +1); // move the cursor down 1
			lines++;
		}
		printf("%c",msg[i]);
		fflush(stdout);
		usleep(30000); // changed from 50000 to speed things up 
	}
	return lines;
}

/* Moves the cursor on the screen. Also saves the position globaly after the move*/
void movecursor(int x, int y)
{
	// Move cursor
	printf("\033[%i;%iH", y, x);
	// Save current position
	current_x = x;
	current_y = y;
}

/* Draw a message box */
void msgbox(char *name, char *msg, enum color_t color)
{
	// determine size of the box....
	int boxsize = (strlen(msg)) / 60;
	int n;
	
	movecursor(current_x, current_y);	// Set the position for the box to start at....
	fgcolor(GRAY, 1);
	// Box holds 60 characters per line
	printf("\n");
	printf("   _______________________________________________________________ \n");
	printf("  |                                                               |\n");
	// Display the correct size box to hold the message
	for(n = 0; n <= boxsize; n++) {
		printf("  |                                                               |\n");
	}
	printf("  |_______________________________________________________________|\n");

	fgcolor(WHITE, 1);
	movecursor(5,current_y + 2); // Move the cursor to the top of the box.
	printf("%s says:", name);
	movecursor(current_x, current_y + 1); // Move 1 down from current position
	fgcolor(color,0);
	printmsg(msg);
	fgcolor(WHITE,0);
	movecursor(current_x, current_y + 1); // Move cursor down to right after the box
}

void prompt()
{
	movecursor(current_x, current_y + 2);
	printf("> ");
	movecursor(current_x + 3 , current_y);
	getchar();
}

/* Clear the screen */
void clear()
{
	printf("\033[2J"); // Clear screen \033 is the ansi escape character and [2J is the clear action
	//printf("\033[6;1H"); // Put the cursor at 1,1 top left
	movecursor(1,6);
}

/* Displays ascii art scene at the top of the screen */
void showscene(int num)
{
	clear(); // Clear out the screen first
	// Display the scene.
	// http://ascii.co.uk/art has much more stuff
	switch(num) {
		case 1:
				// Display the forrest
												  
			puts("                        .'`'.    .'`'.   .'`/\\'.					");
			puts("                    .,.'     `'.'     `'`  /%%\\ `/\\				");
			puts("          .'``'.,.'`                      /%%%%\\/%%\\				");
			puts("       .'`                       /\\       /%%%%\\/%%\\				");
			puts("    ..'              /\\         /%%\\  /\\ /%%%%%%/\\%%\\    			");
			puts("  .'   /\\           /%%\\   /\\   /%%\\ /%%\\%/\\%/\\/%%\\%/\\			");
			puts(".'    /%%\\ /\\       /%%\\  /%%\\ /%%%%\\/%%\\/%%\\%%\\%%%/%%\\			");
			puts("      /%%\\/%%\\ /\\  /%%%%\\/%%%%/%%%%%%\\%%/%%%%\\%%\\%/%%%%\\ 			");
			puts("     /%%%%\\%%%/%%\\ /%%%%\\/%%/\\/%%/\\%%\\%%/%%%%\\%%\\/%%%%%%\\ 		");
			puts("    /%%%%%%\\/\\/%%\\/%%%%%%\\%/%%\\%/%%\\%%\\/%%%%%%\\%%/%%%%%%\\			");
			puts("___ /%%%%%%/%%\\%%/%%%%%%%%\\/%%\\%/%%\\%%\\/%%%%%%\\%/%%%%%%%%\\___________");
			puts("   /%%%%%%%/%%\\%%/%%/\\%%%%/%%%%\\%%%%\\%/%%%%%%%%\\/%%%%%%%%\\		");
			puts("  /%%%%%%%/%%%%\\/%%/%%\\%%%/%%%%\\%%%%\\/%%%%%%%%%%\\%%%%%%%%%\\		");
			puts("  /%%%%%%/%%%%%/\\%%/%%\\%%/%%%%%%\\%%%%/%%%%%%%%%%\\%%%%%%%%%%\\		");
			puts(" /%%%%%%%/%%%%/%%\\/%%%%\\/%%%%%%%%\\%%/%%%%%%%%%%%%\\^^^^^^^^^^		");
			puts(" /%%%%%%/%%%%%/%%\\/%%%%\\/%%%%%%%%\\%/%%%%%%%%%%%%%%\\_- %\\% _-		");
			puts("/%%,\";,%/%%%%/%%%%\\%%%%/%%%%%%%%%%\\/%%%%%%%%%%%%lc\\     |%		");
			puts("^^'~%%;%^^^^^/%%%%\\^^^^/%%%%%%%%%%\\^^^^^^^^^^^^^^^^    %|%% 		");
			puts("  ~%\\/%%~ _- ^^^^^^ -_ ^^^^^^%\\%^^^  _-       %/% /%     _~~-		");
			puts("  ;%\\ /%'                      |/`             %\\|%    _-			");
			puts("    |(`   /% /%  _-  %\\%/%    %|%%     %    -    \\/%              ");
			puts("    |\\   %\\|%         %|%%    -~~-    %\\\\%      -~~~-          	");
			puts("   _||_ -  \\/_-      %\\|/%            %\\|/%                 		");
			puts("          -~~         -~~-    _-       ~~               			");
			puts("------------------------------------------------------------------------ ");
			puts(" ");
		break;
		case 2:
			printf("                                   /\\									\n");
			printf("                              /\\  //\\\\								\n");
			printf("                       /\\    //\\\\///\\\\\\        /\\				\n");
			printf("                      //\\\\  ///\\////\\\\\\\\  /\\  //\\\\			\n");
			printf("         /\\          /  ^ \\/^ ^/^  ^  ^ \\/^ \\/  ^ \\				\n");
			printf("        / ^\\    /\\  / ^   /  ^/ ^ ^ ^   ^\\ ^/  ^^  \\				\n");
			printf("       /^   \\  / ^\\/ ^ ^   ^ / ^  ^    ^  \\/ ^   ^  \\       *		\n");
			printf("      /  ^ ^ \\/^  ^\\ ^ ^ ^   ^  ^   ^   ____  ^   ^  \\     /|\\		\n");
			printf("     / ^ ^  ^ \\ ^  _\\___________________|  |_____^ ^  \\   /||o\\		\n");
			printf("    / ^^  ^ ^ ^\\  /______________________________\\ ^ ^ \\ /|o|||\\	\n");
			printf("   /  ^  ^^ ^ ^  /________________________________\\  ^  /|||||o|\\		\n");
			printf("  /^ ^  ^ ^^  ^    ||___|___||||||||||||___|__|||      /||o||||||\\     \n");
			printf(" / ^   ^   ^    ^  ||___|___||||||||||||___|__|||          | |          \n");
			printf("/ ^ ^ ^  ^  ^  ^   ||||||||||||||||||||||||||||||oooooooooo| |ooooooo 	\n");
			printf("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo	\n\n");
		break;
	}
	// Adjust cursor position this is important so we can print things based on this value later
	current_y = 26;
	current_x = 1;
}


/* Display stats at the top of the screen */
void showstats()
{
	printf("\033[1;1H"); // Put the cursor to 1,1 top left
	printf(" -----------------\n");
	printf("| HP: 500         |\n");
	printf("| Attack: 10      |\n");
	printf("| Defense: 10     |\n");
	printf("| Money: 0        |\n");
	printf(" -----------------\n");
	printf("\033[37;1H"); // Put the cursor at 1,1 top left
}

int scene_1()
{
	char c;
	char name[20];
	char buffer[150]; // general purpose buffer

	//Intro
	showscene(1);
	printmsg("... Can you hear me? (y/n): ");
	//get player input
	scanf("%c", &c);
 	fgetc(stdin); // Consume the newline character leftover from scanf otherwise fgets wont work later
	if(c=='y' || c=='Y'){
		showscene(1);
		printmsg("You wake up in a world you've never seen before\n");
	} else{
		clear();
		printmsg("you pass into the darkness\n");
		return -1;
	}
	
	printmsg("A face stares back at you with greyish skin and eyes that almost glow blue.\nI thought I lost you there for a moment.  What is your name? ");
	fgets(name, 20, stdin);	// get 20 characters from stdin
	name[strnlen(name, 20)-1] = '\0'; // get rid of that white character and terminate the string
	showscene(1);
	snprintf(buffer, 150, "\nNice to meet you %s. My name is Goran.\n", name);
	printmsg(buffer);
	// A loop to display a list of questions

	while(1)
	{
		char item;
		int stop = 0;
		// print menu of questions
		printf("1) What am I doing here?\n");
		printf("2) What are you?\n");
		printf("3) How did I get here?\n");
		printf("Enter a number (or q to quit): ");
		scanf("%c", &item);
		fgetc(stdin); // flush the buffer of the \n
		// Process the input
		switch(item) {
			case '1':
				clear();
				showscene(1);
				printmsg("\nI found you here, nearly dead.  It took me a while to revive you.\n");
			break;
			case '2':
				clear();
				showscene(1);
				printmsg("\nI am a Dalrek, my people have lived here for centuries.\n");
			break;
			case '3':
				clear();
				showscene(1);
				printmsg("\nI was hoping you could tell me that, I just found you here in the forrest, half dead.\n");
				printmsg("\nI can't seem to remember....\n");
			break;
			case 'q':
				stop = 1;
			break;
			default:
				clear();
				showscene(1);
				printmsg("\nSorry, I didnt catch that");
			break;
		} 
		// Check to see if we should continue
		if(stop) {
			return 0;
		}
	}
	showscene(1);
	printf("You say, \" I'm sorry I cant remember much more then my name...\"\n");
	printf("The strange creature replies, \"I'll bring you back to my cabin. Maybe after a warm meal you will remember more. \"\n");
}

int scene_2()
{
	showscene(2);
	printmsg("You arrive at a small cabin over shadowed by great mountains.\n");
	printmsg("A warm meal makes you feel alive again\n");
	getchar();
	showstats();
	getchar();
	return 0;
}

int main ( void )
{
	showscene(2);
	msgbox("Mark", "Nothen up top but a bucket and a mop and an illustrated book about birds seen alot up there but don't be scared who needs action when you got words?", BLUE);
	getchar();
	msgbox("SomeoneElse", "I see your test, how'd it go?", GREEN);
	prompt();
	
	
	getchar();
	//printmsg("Test number one");
	getchar();
	
	
	while (1) { // Main game loop
		// Scene 1
		if((scene_1()) == -1) {
			exit(1);
		}
		scene_2();
	}
}
